/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "github.com/myoperator/k8saggregatorapiserver/pkg/apis/myingress/v1beta1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// MyIngressLister helps list MyIngresses.
// All objects returned here must be treated as read-only.
type MyIngressLister interface {
	// List lists all MyIngresses in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.MyIngress, err error)
	// MyIngresses returns an object that can list and get MyIngresses.
	MyIngresses(namespace string) MyIngressNamespaceLister
	MyIngressListerExpansion
}

// myIngressLister implements the MyIngressLister interface.
type myIngressLister struct {
	indexer cache.Indexer
}

// NewMyIngressLister returns a new MyIngressLister.
func NewMyIngressLister(indexer cache.Indexer) MyIngressLister {
	return &myIngressLister{indexer: indexer}
}

// List lists all MyIngresses in the indexer.
func (s *myIngressLister) List(selector labels.Selector) (ret []*v1beta1.MyIngress, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.MyIngress))
	})
	return ret, err
}

// MyIngresses returns an object that can list and get MyIngresses.
func (s *myIngressLister) MyIngresses(namespace string) MyIngressNamespaceLister {
	return myIngressNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MyIngressNamespaceLister helps list and get MyIngresses.
// All objects returned here must be treated as read-only.
type MyIngressNamespaceLister interface {
	// List lists all MyIngresses in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.MyIngress, err error)
	// Get retrieves the MyIngress from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1beta1.MyIngress, error)
	MyIngressNamespaceListerExpansion
}

// myIngressNamespaceLister implements the MyIngressNamespaceLister
// interface.
type myIngressNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all MyIngresses in the indexer for a given namespace.
func (s myIngressNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.MyIngress, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.MyIngress))
	})
	return ret, err
}

// Get retrieves the MyIngress from the indexer for a given namespace and name.
func (s myIngressNamespaceLister) Get(name string) (*v1beta1.MyIngress, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("myingress"), name)
	}
	return obj.(*v1beta1.MyIngress), nil
}
